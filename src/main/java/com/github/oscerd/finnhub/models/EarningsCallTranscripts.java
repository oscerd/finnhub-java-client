/*
 * Finnhub API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.oscerd.finnhub.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
/**
 * EarningsCallTranscripts
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-22T10:38:13.551248835+01:00[Europe/Rome]")

public class EarningsCallTranscripts {
  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("transcript")
  private List<TranscriptContent> transcript = null;

  @SerializedName("participant")
  private List<TranscriptParticipant> participant = null;

  @SerializedName("audio")
  private String audio = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("time")
  private String time = null;

  @SerializedName("year")
  private Long year = null;

  @SerializedName("quarter")
  private Long quarter = null;

  public EarningsCallTranscripts symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Company symbol.
   * @return symbol
  **/
  @Schema(description = "Company symbol.")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public EarningsCallTranscripts transcript(List<TranscriptContent> transcript) {
    this.transcript = transcript;
    return this;
  }

  public EarningsCallTranscripts addTranscriptItem(TranscriptContent transcriptItem) {
    if (this.transcript == null) {
      this.transcript = new ArrayList<TranscriptContent>();
    }
    this.transcript.add(transcriptItem);
    return this;
  }

   /**
   * Transcript content.
   * @return transcript
  **/
  @Schema(description = "Transcript content.")
  public List<TranscriptContent> getTranscript() {
    return transcript;
  }

  public void setTranscript(List<TranscriptContent> transcript) {
    this.transcript = transcript;
  }

  public EarningsCallTranscripts participant(List<TranscriptParticipant> participant) {
    this.participant = participant;
    return this;
  }

  public EarningsCallTranscripts addParticipantItem(TranscriptParticipant participantItem) {
    if (this.participant == null) {
      this.participant = new ArrayList<TranscriptParticipant>();
    }
    this.participant.add(participantItem);
    return this;
  }

   /**
   * Participant list
   * @return participant
  **/
  @Schema(description = "Participant list")
  public List<TranscriptParticipant> getParticipant() {
    return participant;
  }

  public void setParticipant(List<TranscriptParticipant> participant) {
    this.participant = participant;
  }

  public EarningsCallTranscripts audio(String audio) {
    this.audio = audio;
    return this;
  }

   /**
   * Audio link.
   * @return audio
  **/
  @Schema(description = "Audio link.")
  public String getAudio() {
    return audio;
  }

  public void setAudio(String audio) {
    this.audio = audio;
  }

  public EarningsCallTranscripts id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Transcript&#x27;s ID.
   * @return id
  **/
  @Schema(description = "Transcript's ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EarningsCallTranscripts title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title.
   * @return title
  **/
  @Schema(description = "Title.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public EarningsCallTranscripts time(String time) {
    this.time = time;
    return this;
  }

   /**
   * Time of the event.
   * @return time
  **/
  @Schema(description = "Time of the event.")
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public EarningsCallTranscripts year(Long year) {
    this.year = year;
    return this;
  }

   /**
   * Year of earnings result in the case of earnings call transcript.
   * @return year
  **/
  @Schema(description = "Year of earnings result in the case of earnings call transcript.")
  public Long getYear() {
    return year;
  }

  public void setYear(Long year) {
    this.year = year;
  }

  public EarningsCallTranscripts quarter(Long quarter) {
    this.quarter = quarter;
    return this;
  }

   /**
   * Quarter of earnings result in the case of earnings call transcript.
   * @return quarter
  **/
  @Schema(description = "Quarter of earnings result in the case of earnings call transcript.")
  public Long getQuarter() {
    return quarter;
  }

  public void setQuarter(Long quarter) {
    this.quarter = quarter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EarningsCallTranscripts earningsCallTranscripts = (EarningsCallTranscripts) o;
    return Objects.equals(this.symbol, earningsCallTranscripts.symbol) &&
        Objects.equals(this.transcript, earningsCallTranscripts.transcript) &&
        Objects.equals(this.participant, earningsCallTranscripts.participant) &&
        Objects.equals(this.audio, earningsCallTranscripts.audio) &&
        Objects.equals(this.id, earningsCallTranscripts.id) &&
        Objects.equals(this.title, earningsCallTranscripts.title) &&
        Objects.equals(this.time, earningsCallTranscripts.time) &&
        Objects.equals(this.year, earningsCallTranscripts.year) &&
        Objects.equals(this.quarter, earningsCallTranscripts.quarter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, transcript, participant, audio, id, title, time, year, quarter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EarningsCallTranscripts {\n");
    
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    participant: ").append(toIndentedString(participant)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
