/*
 * Finnhub API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.oscerd.finnhub.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * FilingSentiment
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-22T10:38:13.551248835+01:00[Europe/Rome]")

public class FilingSentiment {
  @SerializedName("negative")
  private Float negative = null;

  @SerializedName("positive")
  private Float positive = null;

  @SerializedName("polarity")
  private Float polarity = null;

  @SerializedName("litigious")
  private Float litigious = null;

  @SerializedName("uncertainty")
  private Float uncertainty = null;

  @SerializedName("constraining")
  private Float constraining = null;

  @SerializedName("modal-weak")
  private Float modalWeak = null;

  @SerializedName("modal-strong")
  private Float modalStrong = null;

  @SerializedName("modal-moderate")
  private Float modalModerate = null;

  public FilingSentiment negative(Float negative) {
    this.negative = negative;
    return this;
  }

   /**
   * % of negative words in the filing.
   * @return negative
  **/
  @Schema(description = "% of negative words in the filing.")
  public Float getNegative() {
    return negative;
  }

  public void setNegative(Float negative) {
    this.negative = negative;
  }

  public FilingSentiment positive(Float positive) {
    this.positive = positive;
    return this;
  }

   /**
   * % of positive words in the filing.
   * @return positive
  **/
  @Schema(description = "% of positive words in the filing.")
  public Float getPositive() {
    return positive;
  }

  public void setPositive(Float positive) {
    this.positive = positive;
  }

  public FilingSentiment polarity(Float polarity) {
    this.polarity = polarity;
    return this;
  }

   /**
   * % of polarity words in the filing.
   * @return polarity
  **/
  @Schema(description = "% of polarity words in the filing.")
  public Float getPolarity() {
    return polarity;
  }

  public void setPolarity(Float polarity) {
    this.polarity = polarity;
  }

  public FilingSentiment litigious(Float litigious) {
    this.litigious = litigious;
    return this;
  }

   /**
   * % of litigious words in the filing.
   * @return litigious
  **/
  @Schema(description = "% of litigious words in the filing.")
  public Float getLitigious() {
    return litigious;
  }

  public void setLitigious(Float litigious) {
    this.litigious = litigious;
  }

  public FilingSentiment uncertainty(Float uncertainty) {
    this.uncertainty = uncertainty;
    return this;
  }

   /**
   * % of uncertainty words in the filing.
   * @return uncertainty
  **/
  @Schema(description = "% of uncertainty words in the filing.")
  public Float getUncertainty() {
    return uncertainty;
  }

  public void setUncertainty(Float uncertainty) {
    this.uncertainty = uncertainty;
  }

  public FilingSentiment constraining(Float constraining) {
    this.constraining = constraining;
    return this;
  }

   /**
   * % of constraining words in the filing.
   * @return constraining
  **/
  @Schema(description = "% of constraining words in the filing.")
  public Float getConstraining() {
    return constraining;
  }

  public void setConstraining(Float constraining) {
    this.constraining = constraining;
  }

  public FilingSentiment modalWeak(Float modalWeak) {
    this.modalWeak = modalWeak;
    return this;
  }

   /**
   * % of modal-weak words in the filing.
   * @return modalWeak
  **/
  @Schema(description = "% of modal-weak words in the filing.")
  public Float getModalWeak() {
    return modalWeak;
  }

  public void setModalWeak(Float modalWeak) {
    this.modalWeak = modalWeak;
  }

  public FilingSentiment modalStrong(Float modalStrong) {
    this.modalStrong = modalStrong;
    return this;
  }

   /**
   * % of modal-strong words in the filing.
   * @return modalStrong
  **/
  @Schema(description = "% of modal-strong words in the filing.")
  public Float getModalStrong() {
    return modalStrong;
  }

  public void setModalStrong(Float modalStrong) {
    this.modalStrong = modalStrong;
  }

  public FilingSentiment modalModerate(Float modalModerate) {
    this.modalModerate = modalModerate;
    return this;
  }

   /**
   * % of modal-moderate words in the filing.
   * @return modalModerate
  **/
  @Schema(description = "% of modal-moderate words in the filing.")
  public Float getModalModerate() {
    return modalModerate;
  }

  public void setModalModerate(Float modalModerate) {
    this.modalModerate = modalModerate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilingSentiment filingSentiment = (FilingSentiment) o;
    return Objects.equals(this.negative, filingSentiment.negative) &&
        Objects.equals(this.positive, filingSentiment.positive) &&
        Objects.equals(this.polarity, filingSentiment.polarity) &&
        Objects.equals(this.litigious, filingSentiment.litigious) &&
        Objects.equals(this.uncertainty, filingSentiment.uncertainty) &&
        Objects.equals(this.constraining, filingSentiment.constraining) &&
        Objects.equals(this.modalWeak, filingSentiment.modalWeak) &&
        Objects.equals(this.modalStrong, filingSentiment.modalStrong) &&
        Objects.equals(this.modalModerate, filingSentiment.modalModerate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negative, positive, polarity, litigious, uncertainty, constraining, modalWeak, modalStrong, modalModerate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilingSentiment {\n");
    
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("    positive: ").append(toIndentedString(positive)).append("\n");
    sb.append("    polarity: ").append(toIndentedString(polarity)).append("\n");
    sb.append("    litigious: ").append(toIndentedString(litigious)).append("\n");
    sb.append("    uncertainty: ").append(toIndentedString(uncertainty)).append("\n");
    sb.append("    constraining: ").append(toIndentedString(constraining)).append("\n");
    sb.append("    modalWeak: ").append(toIndentedString(modalWeak)).append("\n");
    sb.append("    modalStrong: ").append(toIndentedString(modalStrong)).append("\n");
    sb.append("    modalModerate: ").append(toIndentedString(modalModerate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
