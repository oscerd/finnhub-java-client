/*
 * Finnhub API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.oscerd.finnhub.models;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.LocalDate;

import java.util.Objects;
/**
 * EarningResult
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-22T10:38:13.551248835+01:00[Europe/Rome]")

public class EarningResult {
  @SerializedName("actual")
  private Float actual = null;

  @SerializedName("estimate")
  private Float estimate = null;

  @SerializedName("surprise")
  private Float surprise = null;

  @SerializedName("surprisePercent")
  private Float surprisePercent = null;

  @SerializedName("period")
  private LocalDate period = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("year")
  private Long year = null;

  @SerializedName("quarter")
  private Long quarter = null;

  public EarningResult actual(Float actual) {
    this.actual = actual;
    return this;
  }

   /**
   * Actual earning result.
   * @return actual
  **/
  @Schema(description = "Actual earning result.")
  public Float getActual() {
    return actual;
  }

  public void setActual(Float actual) {
    this.actual = actual;
  }

  public EarningResult estimate(Float estimate) {
    this.estimate = estimate;
    return this;
  }

   /**
   * Estimated earning.
   * @return estimate
  **/
  @Schema(description = "Estimated earning.")
  public Float getEstimate() {
    return estimate;
  }

  public void setEstimate(Float estimate) {
    this.estimate = estimate;
  }

  public EarningResult surprise(Float surprise) {
    this.surprise = surprise;
    return this;
  }

   /**
   * Surprise - The difference between actual and estimate.
   * @return surprise
  **/
  @Schema(description = "Surprise - The difference between actual and estimate.")
  public Float getSurprise() {
    return surprise;
  }

  public void setSurprise(Float surprise) {
    this.surprise = surprise;
  }

  public EarningResult surprisePercent(Float surprisePercent) {
    this.surprisePercent = surprisePercent;
    return this;
  }

   /**
   * Surprise percent.
   * @return surprisePercent
  **/
  @Schema(description = "Surprise percent.")
  public Float getSurprisePercent() {
    return surprisePercent;
  }

  public void setSurprisePercent(Float surprisePercent) {
    this.surprisePercent = surprisePercent;
  }

  public EarningResult period(LocalDate period) {
    this.period = period;
    return this;
  }

   /**
   * Reported period.
   * @return period
  **/
  @Schema(description = "Reported period.")
  public LocalDate getPeriod() {
    return period;
  }

  public void setPeriod(LocalDate period) {
    this.period = period;
  }

  public EarningResult symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Company symbol.
   * @return symbol
  **/
  @Schema(description = "Company symbol.")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public EarningResult year(Long year) {
    this.year = year;
    return this;
  }

   /**
   * Fiscal year.
   * @return year
  **/
  @Schema(description = "Fiscal year.")
  public Long getYear() {
    return year;
  }

  public void setYear(Long year) {
    this.year = year;
  }

  public EarningResult quarter(Long quarter) {
    this.quarter = quarter;
    return this;
  }

   /**
   * Fiscal quarter.
   * @return quarter
  **/
  @Schema(description = "Fiscal quarter.")
  public Long getQuarter() {
    return quarter;
  }

  public void setQuarter(Long quarter) {
    this.quarter = quarter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EarningResult earningResult = (EarningResult) o;
    return Objects.equals(this.actual, earningResult.actual) &&
        Objects.equals(this.estimate, earningResult.estimate) &&
        Objects.equals(this.surprise, earningResult.surprise) &&
        Objects.equals(this.surprisePercent, earningResult.surprisePercent) &&
        Objects.equals(this.period, earningResult.period) &&
        Objects.equals(this.symbol, earningResult.symbol) &&
        Objects.equals(this.year, earningResult.year) &&
        Objects.equals(this.quarter, earningResult.quarter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actual, estimate, surprise, surprisePercent, period, symbol, year, quarter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EarningResult {\n");
    
    sb.append("    actual: ").append(toIndentedString(actual)).append("\n");
    sb.append("    estimate: ").append(toIndentedString(estimate)).append("\n");
    sb.append("    surprise: ").append(toIndentedString(surprise)).append("\n");
    sb.append("    surprisePercent: ").append(toIndentedString(surprisePercent)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
